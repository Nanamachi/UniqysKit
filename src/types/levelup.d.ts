/** Declaration file generated by dts-gen */

/* @types/levelupの記述が古くてmemdownが使えないので自前で用意している */

export = levelup

declare class levelup {
  constructor (db: any, options: any, callback: any)

  batch (arr: any, options: any, callback: any, ...args: any[]): any

  close (callback: any, ...args: any[]): any

  createKeyStream (options: any): any

  createReadStream (options: any): any

  createValueStream (options: any): any

  del (key: any, options: any, callback: any): any

  emit (type: any, ...args: any[]): any

  get (key: any, options: any, callback: any): any

  isClosed (): any

  isOpen (): any

  keyStream (options: any): any

  once (type: any, listener: any): any

  open (callback: any): any

  put (key: any, value: any, options: any, callback: any): any

  readStream (options: any): any

  toString (): any

  valueStream (options: any): any

  static default: any
}

declare namespace levelup {
  namespace errors {
    class EncodingError {
      constructor (message: any, cause: any)
    }

    class InitializationError {
      constructor (message: any, cause: any)
    }

    class LevelUPError {
      constructor (message: any, cause: any)
    }

    class NotFoundError {
      constructor (message: any, cause: any)
    }

    class OpenError {
      constructor (message: any, cause: any)
    }

    class ReadError {
      constructor (message: any, cause: any)
    }

    class WriteError {
      constructor (message: any, cause: any)
    }

    namespace EncodingError {
      namespace prototype {
        const cause: any

        const message: any

        const name: string

        const stack: string

        const type: string

        function toString (): any
      }
    }

    namespace InitializationError {
      namespace prototype {
        const cause: any

        const message: any

        const name: string

        const stack: string

        const type: string

        function toString (): any
      }
    }

    namespace LevelUPError {
      namespace prototype {
        const cause: any

        const message: any

        const name: string

        const stack: string

        const type: string

        function toString (): any
      }
    }

    namespace NotFoundError {
      namespace prototype {
        const cause: any

        const message: any

        const name: string

        const notFound: boolean

        const stack: string

        const status: number

        const type: string

        function toString (): any
      }
    }

    namespace OpenError {
      namespace prototype {
        const cause: any

        const message: any

        const name: string

        const stack: string

        const type: string

        function toString (): any
      }
    }

    namespace ReadError {
      namespace prototype {
        const cause: any

        const message: any

        const name: string

        const stack: string

        const type: string

        function toString (): any
      }
    }

    namespace WriteError {
      namespace prototype {
        const cause: any

        const message: any

        const name: string

        const stack: string

        const type: string

        function toString (): any
      }
    }
  }

  namespace prototype {
    const domain: any

    function addListener (type: any, listener: any): any

    function batch (arr: any, options: any, callback: any, ...args: any[]): any

    function close (callback: any, ...args: any[]): any

    function createKeyStream (options: any): any

    function createReadStream (options: any): any

    function createValueStream (options: any): any

    function del (key: any, options: any, callback: any): any

    function emit (type: any, ...args: any[]): any

    function eventNames (): any

    function get (key: any, options: any, callback: any): any

    function getMaxListeners (): any

    function isClosed (): any

    function isOpen (): any

    function keyStream (options: any): any

    function listenerCount (type: any): any

    function listeners (type: any): any

    function on (type: any, listener: any): any

    function once (type: any, listener: any): any

    function open (callback: any): any

    function prependListener (type: any, listener: any): any

    function prependOnceListener (type: any, listener: any): any

    function put (key: any, value: any, options: any, callback: any): any

    function readStream (options: any): any

    function removeAllListeners (type: any, ...args: any[]): any

    function removeListener (type: any, listener: any): any

    function setMaxListeners (n: any): any

    function toString (): any

    function valueStream (options: any): any

    namespace addListener {
      const prototype: {}
    }

    namespace batch {
      const prototype: {}
    }

    namespace close {
      const prototype: {}
    }

    namespace createKeyStream {
      const prototype: {}
    }

    namespace createReadStream {
      const prototype: {}
    }

    namespace createValueStream {
      const prototype: {}
    }

    namespace del {
      const prototype: {}
    }

    namespace emit {
      const prototype: {}
    }

    namespace eventNames {
      const prototype: {}
    }

    namespace get {
      const prototype: {}
    }

    namespace getMaxListeners {
      const prototype: {}
    }

    namespace isClosed {
      const prototype: {}
    }

    namespace isOpen {
      const prototype: {}
    }

    namespace keyStream {
      const prototype: {}
    }

    namespace listenerCount {
      const prototype: {}
    }

    namespace listeners {
      const prototype: {}
    }

    namespace on {
      const prototype: {}
    }

    namespace once {
      const prototype: {}
    }

    namespace open {
      const prototype: {}
    }

    namespace prependListener {
      const prototype: {}
    }

    namespace prependOnceListener {
      const prototype: {}
    }

    namespace put {
      const prototype: {}
    }

    namespace readStream {
      const prototype: {}
    }

    namespace removeAllListeners {
      const prototype: {}
    }

    namespace removeListener {
      const prototype: {}
    }

    namespace setMaxListeners {
      const prototype: {}
    }

    namespace toString {
      const prototype: {}
    }

    namespace valueStream {
      const prototype: {}
    }
  }
}
