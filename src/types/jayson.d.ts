/** Declaration file generated by dts-gen */

export class client {
  constructor(server: any, options?: any, ...args: any[]);

  request (method: any, params?: any, id?: any, callback?: any): any;

}

export class method {
  constructor(handler: any, options: any);

  execute (server: any, requestParams: any, callback: any): any;

  getHandler (): any;

  setHandler (handler: any): void;

}

export class server {
  constructor(methods: any, options?: any);

  call (request: any, originalCallback: any, ...args: any[]): any;

  error (code: any, message: any, data: any): any;

  getMethod (name: any): any;

  hasMethod (name: any): any;

  method (name: any, definition: any): void;

  methods (methods: any): void;

  removeMethod (name: any): void;

  http (server?: any, options?: any): any;

  https (server?: any, options?: any): any;

  middleware (server?: any, outerOptions?: any): any;

  tcp (server?: any, options?: any): any;

  tls (server?: any, options?: any): any;

  static errorMessages: {
    "-32600": string;
    "-32601": string;
    "-32602": string;
    "-32603": string;
    "-32700": string;
  };

  static errors: {
    INTERNAL_ERROR: number;
    INVALID_PARAMS: number;
    INVALID_REQUEST: number;
    METHOD_NOT_FOUND: number;
    PARSE_ERROR: number;
  };

}

export namespace client {
  class http {
    constructor(options: any);

    domain: any;

    addListener (type: any, listener: any): any;

    emit (type: any, ...args: any[]): any;

    eventNames (): any;

    getMaxListeners (): any;

    listenerCount (type: any): any;

    listeners (type: any): any;

    on (type: any, listener: any): any;

    once (type: any, listener: any): any;

    prependListener (type: any, listener: any): any;

    prependOnceListener (type: any, listener: any): any;

    removeAllListeners (type: any, ...args: any[]): any;

    removeListener (type: any, listener: any): any;

    request (method: any, params: any, id?: any, callback?: any): any;

    setMaxListeners (n: any): any;

  }

  class https {
    constructor(options: any);

    domain: any;

    addListener (type: any, listener: any): any;

    emit (type: any, ...args: any[]): any;

    eventNames (): any;

    getMaxListeners (): any;

    listenerCount (type: any): any;

    listeners (type: any): any;

    on (type: any, listener: any): any;

    once (type: any, listener: any): any;

    prependListener (type: any, listener: any): any;

    prependOnceListener (type: any, listener: any): any;

    removeAllListeners (type: any, ...args: any[]): any;

    removeListener (type: any, listener: any): any;

    request (method: any, params: any, id: any, callback: any): any;

    setMaxListeners (n: any): any;

  }

  class tcp {
    constructor(options: any);

  }

  class tls {
    constructor(options: any);

  }

  namespace http {

    namespace addListener {
      // Too-deep object hierarchy from jayson.client.http.prototype.addListener
      const prototype: any;

    }

    namespace emit {
      // Too-deep object hierarchy from jayson.client.http.prototype.emit
      const prototype: any;

    }

    namespace eventNames {
      // Too-deep object hierarchy from jayson.client.http.prototype.eventNames
      const prototype: any;

    }

    namespace getMaxListeners {
      // Too-deep object hierarchy from jayson.client.http.prototype.getMaxListeners
      const prototype: any;

    }

    namespace listenerCount {
      // Too-deep object hierarchy from jayson.client.http.prototype.listenerCount
      const prototype: any;

    }

    namespace listeners {
      // Too-deep object hierarchy from jayson.client.http.prototype.listeners
      const prototype: any;

    }

    namespace on {
      // Too-deep object hierarchy from jayson.client.http.prototype.on
      const prototype: any;

    }

    namespace once {
      // Too-deep object hierarchy from jayson.client.http.prototype.once
      const prototype: any;

    }

    namespace prependListener {
      // Too-deep object hierarchy from jayson.client.http.prototype.prependListener
      const prototype: any;

    }

    namespace prependOnceListener {
      // Too-deep object hierarchy from jayson.client.http.prototype.prependOnceListener
      const prototype: any;

    }

    namespace removeAllListeners {
      // Too-deep object hierarchy from jayson.client.http.prototype.removeAllListeners
      const prototype: any;

    }

    namespace removeListener {
      // Too-deep object hierarchy from jayson.client.http.prototype.removeListener
      const prototype: any;

    }

    namespace request {
      // Too-deep object hierarchy from jayson.client.http.prototype.request
      const prototype: any;

    }

    namespace setMaxListeners {
      // Too-deep object hierarchy from jayson.client.http.prototype.setMaxListeners
      const prototype: any;

    }

  }

  namespace https {
    namespace addListener {
      // Too-deep object hierarchy from jayson.client.https.prototype.addListener
      const prototype: any;

    }

    namespace emit {
      // Too-deep object hierarchy from jayson.client.https.prototype.emit
      const prototype: any;

    }

    namespace eventNames {
      // Too-deep object hierarchy from jayson.client.https.prototype.eventNames
      const prototype: any;

    }

    namespace getMaxListeners {
      // Too-deep object hierarchy from jayson.client.https.prototype.getMaxListeners
      const prototype: any;

    }

    namespace listenerCount {
      // Too-deep object hierarchy from jayson.client.https.prototype.listenerCount
      const prototype: any;

    }

    namespace listeners {
      // Too-deep object hierarchy from jayson.client.https.prototype.listeners
      const prototype: any;

    }

    namespace on {
      // Too-deep object hierarchy from jayson.client.https.prototype.on
      const prototype: any;

    }

    namespace once {
      // Too-deep object hierarchy from jayson.client.https.prototype.once
      const prototype: any;

    }

    namespace prependListener {
      // Too-deep object hierarchy from jayson.client.https.prototype.prependListener
      const prototype: any;

    }

    namespace prependOnceListener {
      // Too-deep object hierarchy from jayson.client.https.prototype.prependOnceListener
      const prototype: any;

    }

    namespace removeAllListeners {
      // Too-deep object hierarchy from jayson.client.https.prototype.removeAllListeners
      const prototype: any;

    }

    namespace removeListener {
      // Too-deep object hierarchy from jayson.client.https.prototype.removeListener
      const prototype: any;

    }

    namespace request {
      // Too-deep object hierarchy from jayson.client.https.prototype.request
      const prototype: any;

    }

    namespace setMaxListeners {
      // Too-deep object hierarchy from jayson.client.https.prototype.setMaxListeners
      const prototype: any;

    }

  }

  namespace tcp {
      const domain: any;

      function addListener (type: any, listener: any): any;

      function emit (type: any, ...args: any[]): any;

      function eventNames (): any;

      function getMaxListeners (): any;

      function listenerCount (type: any): any;

      function listeners (type: any): any;

      function on (type: any, listener: any): any;

      function once (type: any, listener: any): any;

      function prependListener (type: any, listener: any): any;

      function prependOnceListener (type: any, listener: any): any;

      function removeAllListeners (type: any, ...args: any[]): any;

      function removeListener (type: any, listener: any): any;

      function request (method: any, params: any, id: any, callback: any): any;

      function setMaxListeners (n: any): any;

      namespace addListener {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.addListener
        const prototype: any;

      }

      namespace emit {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.emit
        const prototype: any;

      }

      namespace eventNames {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.eventNames
        const prototype: any;

      }

      namespace getMaxListeners {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.getMaxListeners
        const prototype: any;

      }

      namespace listenerCount {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.listenerCount
        const prototype: any;

      }

      namespace listeners {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.listeners
        const prototype: any;

      }

      namespace on {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.on
        const prototype: any;

      }

      namespace once {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.once
        const prototype: any;

      }

      namespace prependListener {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.prependListener
        const prototype: any;

      }

      namespace prependOnceListener {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.prependOnceListener
        const prototype: any;

      }

      namespace removeAllListeners {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.removeAllListeners
        const prototype: any;

      }

      namespace removeListener {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.removeListener
        const prototype: any;

      }

      namespace request {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.request
        const prototype: any;

      }

      namespace setMaxListeners {
        // Too-deep object hierarchy from jayson.client.tcp.prototype.setMaxListeners
        const prototype: any;

      }


  }

  namespace tls {
      const domain: any;

      function addListener (type: any, listener: any): any;

      function emit (type: any, ...args: any[]): any;

      function eventNames (): any;

      function getMaxListeners (): any;

      function listenerCount (type: any): any;

      function listeners (type: any): any;

      function on (type: any, listener: any): any;

      function once (type: any, listener: any): any;

      function prependListener (type: any, listener: any): any;

      function prependOnceListener (type: any, listener: any): any;

      function removeAllListeners (type: any, ...args: any[]): any;

      function removeListener (type: any, listener: any): any;

      function request (method: any, params: any, id: any, callback: any): any;

      function setMaxListeners (n: any): any;

      namespace addListener {
        // Too-deep object hierarchy from jayson.client.tls.prototype.addListener
        const prototype: any;

      }

      namespace emit {
        // Too-deep object hierarchy from jayson.client.tls.prototype.emit
        const prototype: any;

      }

      namespace eventNames {
        // Too-deep object hierarchy from jayson.client.tls.prototype.eventNames
        const prototype: any;

      }

      namespace getMaxListeners {
        // Too-deep object hierarchy from jayson.client.tls.prototype.getMaxListeners
        const prototype: any;

      }

      namespace listenerCount {
        // Too-deep object hierarchy from jayson.client.tls.prototype.listenerCount
        const prototype: any;

      }

      namespace listeners {
        // Too-deep object hierarchy from jayson.client.tls.prototype.listeners
        const prototype: any;

      }

      namespace on {
        // Too-deep object hierarchy from jayson.client.tls.prototype.on
        const prototype: any;

      }

      namespace once {
        // Too-deep object hierarchy from jayson.client.tls.prototype.once
        const prototype: any;

      }

      namespace prependListener {
        // Too-deep object hierarchy from jayson.client.tls.prototype.prependListener
        const prototype: any;

      }

      namespace prependOnceListener {
        // Too-deep object hierarchy from jayson.client.tls.prototype.prependOnceListener
        const prototype: any;

      }

      namespace removeAllListeners {
        // Too-deep object hierarchy from jayson.client.tls.prototype.removeAllListeners
        const prototype: any;

      }

      namespace removeListener {
        // Too-deep object hierarchy from jayson.client.tls.prototype.removeListener
        const prototype: any;

      }

      namespace request {
        // Too-deep object hierarchy from jayson.client.tls.prototype.request
        const prototype: any;

      }

      namespace setMaxListeners {
        // Too-deep object hierarchy from jayson.client.tls.prototype.setMaxListeners
        const prototype: any;

      }

    }

}

export namespace method {
    function execute (server: any, requestParams: any, callback: any): any;

    function getHandler (): any;

    function setHandler (handler: any): void;

    namespace execute {
      const prototype: {
      };

    }

    namespace getHandler {
      const prototype: {
      };

    }

    namespace setHandler {
      const prototype: {
      };

    }
}

export namespace server {

  namespace http {
    namespace prototype {
      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const addListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const address: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const close: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const domain: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const emit: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const eventNames: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const getConnections: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const getMaxListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const listen: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const listenFD: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const listenerCount: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const listeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const listening: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const on: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const once: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const prependListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const prependOnceListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const ref: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const removeAllListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const removeListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const setMaxListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const setTimeout: any;

      // Too-deep object hierarchy from jayson.server.interfaces.http.prototype
      const unref: any;

    }

  }

  namespace https {
    namespace prototype {
      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const addContext: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const addListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const address: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const close: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const domain: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const emit: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const eventNames: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const getConnections: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const getMaxListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const getTicketKeys: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const listen: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const listenFD: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const listenerCount: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const listeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const listening: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const on: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const once: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const prependListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const prependOnceListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const ref: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const removeAllListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const removeListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const setMaxListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const setOptions: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const setTicketKeys: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const setTimeout: any;

      // Too-deep object hierarchy from jayson.server.interfaces.https.prototype
      const unref: any;

    }

  }

  namespace middleware {
    const prototype: {
    };

  }

  namespace tcp {
    namespace prototype {
      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const addListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const address: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const close: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const domain: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const emit: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const eventNames: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const getConnections: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const getMaxListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const listen: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const listenFD: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const listenerCount: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const listeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const listening: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const on: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const once: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const prependListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const prependOnceListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const ref: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const removeAllListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const removeListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const setMaxListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tcp.prototype
      const unref: any;

    }

  }

  namespace tls {
    namespace prototype {
      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const addContext: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const addListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const address: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const close: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const domain: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const emit: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const eventNames: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const getConnections: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const getMaxListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const getTicketKeys: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const listen: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const listenFD: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const listenerCount: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const listeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const listening: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const on: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const once: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const prependListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const prependOnceListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const ref: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const removeAllListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const removeListener: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const setMaxListeners: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const setOptions: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const setTicketKeys: any;

      // Too-deep object hierarchy from jayson.server.interfaces.tls.prototype
      const unref: any;

    }

  }

  const domain: any;

  function addListener (type: any, listener: any): any;

  function call (request: any, originalCallback: any, ...args: any[]): any;

  function emit (type: any, ...args: any[]): any;

  function error (code: any, message: any, data: any): any;

  function eventNames (): any;

  function getMaxListeners (): any;

  function getMethod (name: any): any;

  function hasMethod (name: any): any;

  function listenerCount (type: any): any;

  function listeners (type: any): any;

  function method (name: any, definition: any): void;

  function methods (methods: any): void;

  function on (type: any, listener: any): any;

  function once (type: any, listener: any): any;

  function prependListener (type: any, listener: any): any;

  function prependOnceListener (type: any, listener: any): any;

  function removeAllListeners (type: any, ...args: any[]): any;

  function removeListener (type: any, listener: any): any;

  function removeMethod (name: any): void;

  function setMaxListeners (n: any): any;

  namespace addListener {
    const prototype: {
    };

  }

  namespace call {
    const prototype: {
    };

  }

  namespace emit {
    const prototype: {
    };

  }

  namespace error {
    const prototype: {
    };

  }

  namespace eventNames {
    const prototype: {
    };

  }

  namespace getMaxListeners {
    const prototype: {
    };

  }

  namespace getMethod {
    const prototype: {
    };

  }

  namespace hasMethod {
    const prototype: {
    };

  }

  namespace listenerCount {
    const prototype: {
    };

  }

  namespace listeners {
    const prototype: {
    };

  }

  namespace method {
    const prototype: {
    };

  }

  namespace methods {
    const prototype: {
    };

  }

  namespace on {
    const prototype: {
    };

  }

  namespace once {
    const prototype: {
    };

  }

  namespace prependListener {
    const prototype: {
    };

  }

  namespace prependOnceListener {
    const prototype: {
    };

  }

  namespace removeAllListeners {
    const prototype: {
    };

  }

  namespace removeListener {
    const prototype: {
    };

  }

  namespace removeMethod {
    const prototype: {
    };

  }

  namespace setMaxListeners {
    const prototype: {
    };

  }

}

export namespace utils {
  function generateId (): any;

  function getHttpListener (self: any, server: any): any;

  function getParameterNames (func: any): any;

  function isContentType (request: any, type: any): any;

  function isMethod (request: any, method: any): any;

  function merge (...args: any[]): any;

  function parseBody (stream: any, options: any, callback: any): any;

  function parseStream (stream: any, options: any, onRequest: any): void;

  function request (method: any, params: any, id: any, options: any): any;

  function response (error: any, result: any, id: any, version: any): any;

  function walk (holder: any, key: any, fn: any): any;

  namespace JSON {
    function parse (str: any, options: any, callback: any): any;

    function stringify (obj: any, options: any, callback: any): any;

    namespace parse {
      const prototype: {
      };

    }

    namespace stringify {
      const prototype: {
      };

    }

  }

  namespace Request {
    function isBatch (request: any): any;

    function isNotification (request: any): any;

    function isValidRequest (request: any, version: any): any;

    function isValidVersionOneRequest (request: any): any;

    function isValidVersionTwoRequest (request: any): any;

    namespace isBatch {
      const prototype: {
      };

    }

    namespace isNotification {
      const prototype: {
      };

    }

    namespace isValidRequest {
      const prototype: {
      };

    }

    namespace isValidVersionOneRequest {
      const prototype: {
      };

    }

    namespace isValidVersionTwoRequest {
      const prototype: {
      };

    }

  }

  namespace Response {
    function isValidError (error: any, version: any): any;

    namespace isValidError {
      const prototype: {
      };

    }

  }

  namespace generateId {
    const prototype: {
    };

  }

  namespace getHttpListener {
    const prototype: {
    };

  }

  namespace getParameterNames {
    const prototype: {
    };

  }

  namespace isContentType {
    const prototype: {
    };

  }

  namespace isMethod {
    const prototype: {
    };

  }

  namespace merge {
    const prototype: {
    };

  }

  namespace parseBody {
    const prototype: {
    };

  }

  namespace parseStream {
    const prototype: {
    };

  }

  namespace request {
    const prototype: {
    };

  }

  namespace response {
    const prototype: {
    };

  }

  namespace walk {
    const prototype: {
    };

  }

}

