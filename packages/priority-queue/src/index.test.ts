import { PriorityQueue, Utility } from '.'

describe('Priority Queue', () => {
  it('dequeue value ascending order by priority', () => {
    const pq = new PriorityQueue(Utility.ascending<string>())
    expect(pq.dequeue()).toBeUndefined()
    pq.enqueue({ priority: 10, value: 'bar' })
    pq.enqueue({ priority: 2, value: 'buzz' })
    pq.enqueue({ priority: 5, value: 'foo' })
    pq.enqueue({ priority: 8, value: 'fizz' })
    expect(pq.dequeue()).toEqual({ priority: 2, value: 'buzz' })
    expect(pq.dequeue()).toEqual({ priority: 5, value: 'foo' })
    expect(pq.dequeue()).toEqual({ priority: 8, value: 'fizz' })
    pq.enqueue({ priority: 3, value: 'meow' })
    expect(pq.dequeue()).toEqual({ priority: 3, value: 'meow' })
    expect(pq.dequeue()).toEqual({ priority: 10, value: 'bar' })
    pq.enqueue({ priority: 1, value: 'buzz' })
    pq.enqueue({ priority: 6, value: 'foo' })
    pq.enqueue({ priority: 4, value: 'bar' })
    expect(pq.dequeue()).toEqual({ priority: 1, value: 'buzz' })
    expect(pq.dequeue()).toEqual({ priority: 4, value: 'bar' })
    expect(pq.dequeue()).toEqual({ priority: 6, value: 'foo' })
    expect(pq.dequeue()).toBeUndefined()
  })
  it('dequeue value descending order by priority', () => {
    const pq = new PriorityQueue(Utility.descending<string>())
    expect(pq.dequeue()).toBeUndefined()
    pq.enqueue({ priority: 5, value: 'foo' })
    pq.enqueue({ priority: 8, value: 'buzz' })
    pq.enqueue({ priority: 2, value: 'fizz' })
    expect(pq.dequeue()).toEqual({ priority: 8, value: 'buzz' })
    expect(pq.dequeue()).toEqual({ priority: 5, value: 'foo' })
    expect(pq.dequeue()).toEqual({ priority: 2, value: 'fizz' })
    expect(pq.dequeue()).toBeUndefined()
  })
  it('peek most priority value', () => {
    const pq = new PriorityQueue(Utility.ascending<string>())
    expect(pq.peek()).toBeUndefined()
    pq.enqueue({ priority: 5, value: 'bar' })
    pq.enqueue({ priority: 3, value: 'foo' })
    expect(pq.peek()).toEqual({ priority: 3, value: 'foo' })
    expect(pq.peek()).toEqual({ priority: 3, value: 'foo' })
    pq.dequeue()
    expect(pq.peek()).toEqual({ priority: 5, value: 'bar' })
  })
})
